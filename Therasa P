#Import required libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score

# Load the dataset
# Make sure to replace this path with your actual dataset file
# For demonstration, let's create a mock dataset similar to churn data
data = {
    'gender': ['Male', 'Female', 'Female', 'Male'],
    'SeniorCitizen': [0, 1, 0, 0],
    'Partner': ['Yes', 'No', 'Yes', 'No'],
    'Dependents': ['No', 'No', 'Yes', 'No'],
    'tenure': [1, 34, 2, 45],
    'PhoneService': ['No', 'Yes', 'Yes', 'Yes'],
    'InternetService': ['DSL', 'Fiber optic', 'DSL', 'No'],
    'Contract': ['Month-to-month', 'One year', 'Month-to-month', 'Two year'],
    'MonthlyCharges': [29.85, 56.95, 53.85, 42.30],
    'TotalCharges': [29.85, 1889.5, 108.15, 1840.75],
    'Churn': ['No', 'No', 'Yes', 'No']
}

df = pd.DataFrame(data)

# Convert categorical features using LabelEncoder
label_encoders = {}
for column in df.select_dtypes(include='object').columns:
    le = LabelEncoder()
    df[column] = le.fit_transform(df[column])
    label_encoders[column] = le  # Save encoder if needed for inverse transformation

# Split features and target
X = df.drop('Churn', axis=1)
y = df['Churn']

# Feature scaling
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Split dataset into training and testing
X_train, X_test, y_train, y_test = train_test_split(
    X_scaled, y, test_size=0.25, random_state=42)

# Train model
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Evaluation
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))
print("Accuracy Score:", accuracy_score(y_test, y_pred))
Output:
Confusion Matrix:
 [[1]]

Classification Report:
               precision    recall  f1-score   support

           0       1.00      1.00      1.00         1

    accuracy                           1.00         1
   macro avg       1.00      1.00      1.00         1
weighted avg       1.00      1.00      1.00         1

Accuracy Score: 1.0
